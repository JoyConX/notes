* 微服务开发的12项要素

+ Configuration Service
+ Discovery Service
+ Circuit breakers
+ Distributed sessions


spring cloud官方文档提到的服务开发的12项要素。

I. Codebase
从一个代码库部署到多个环境。
II. Dependencies
使用显式的声明隔离依赖，即模块单独运行，并可以显式管理依赖。
III. Config
在系统外部存储配置信息。
IV. Backing Services
把支持性服务看做是资源，支持性服务包括数据库、消息队列、缓冲服务器等。
V. Build, release, run
严格的划分编译、构建、运行阶段，每个阶段由工具进行管理。
VI. Processes
应用作为无状态执行。
VII. Port binding
经由端口绑定导出服务，优先选择 HTTP API 作为通用的集成框架。
VIII. Concurrency
并发性使用水平扩展实现，对于web就是水平扩展web应用实现。
IX. Disposability
服务可处置性，任何服务可以随意终止或启动。
X. Dev/prod parity
开发和生产环境保持高度一致，一键式部署。
XI. Logs
将日志看做是事件流来管理，所有参与的服务均使用该方式处理日志。
XII. Admin processes
管理任务作为一次性的过程运行（使用脚本管理服务启动和停止）。

* 使用Spring Cloud和Docker构建微服务

用例子来说明，非常方便入门 http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html

Configuration Service
Discovery Service
Circuit breakers
Distributed sessions

** 问题： Connect to localhost:2375 [localhost ]

DOCKER_HOST=unix:///var/run/docker.sock mvn clean install
* spring boot

** 介绍

Spring Boot是Spring团队推出的新框架，它所使用的核心技术还是Spring框架，主要是Spring 4.x，所以如果熟悉spring 4的人，能够更快的接受和学会这个框架。Spring boot可以看做是在spring框架基础上再包了一层，这一层包含方便开发者进行配置管理和快速开发的模块，以及提供了一些开箱即用的工具，比如监控等。

** Quick Start

[[http://projects.spring.io/spring-boot/][参考文章]] 官网

配置
#+begin_src xml


  <build>
    <plugins>    
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2.1</version>
        <executions>
          <execution>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <executable>java</executable>
          <arguments>
            <argument>-classpath</argument>
            <classpath>
            </classpath>
            <argument>com.mycompany.app.SampleController</argument>
          </arguments>
        </configuration>
      </plugin>
    </plugins>
  </build>


  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.3.6.RELEASE</version>
  </parent>
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
  </dependencies>
#+end_src

hello/SampleController.java

#+begin_src java
package hello;

import org.springframework.boot.*;
import org.springframework.boot.autoconfigure.*;
import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;

@Controller
@EnableAutoConfiguration
public class SampleController {

    @RequestMapping("/")
    @ResponseBody
    String home() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(SampleController.class, args);
    }
}
#+end_src

运行

java -cp my-app-1.0-SNAPSHOT.jar com.mycompany.app.SampleController

java -cp ~/.m2/repository/org/springframework/boot/spring-boot/1.3.6.RELEASE/spring-boot-1.3.6.RELEASE.jar:target/my-app-1.0-SNAPSHOT.jar \
com.mycompany.app.SampleController


[[http://start.spring.io/][项目生成器]]
** Spring Boot Reference Guide

+ [[http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started][英文]]
+ [[https://github.com/qibaoguang/Spring-Boot-Reference-Guide][中文]]
* 7天学会spring cloud

