* 以什么样的方式向客户端提供服务

常用的方法有:

RPC 所谓的远程过程调用 (面向方法)
SOA 所谓的面向服务的架构(面向消息)
REST 所谓的 Representational state transfer (面向资源)


* RPC与REST的区别

如果你想只记住一点,那么就请记住 RPC是以动词为中心的, REST是以名词为中心的, 此处的 动词指的是一些方法, 名词是指资源.

你会发现,以动词为中心, 意味着, 当你要需要加入新功能时,你必须要添加更多的动词, 这时候服务器端需要实现 相应的动词(方法), 客户端需要知道这个新的动词并进行调用.

而以名词为中心, 假使我请求的是 hostname/friends/, 无论这个URI对应的服务怎么变化,客户端是无需 关注和更新的,而这种变化对客户端也是透明的. ??

至于其它的区别,如对实现语言的依赖, 耦合性等,这些都是上面提到的这个根本区别所衍生的.


[[http://www.slideshare.net/trilancer/restful-user-experience-1421793][推荐阅读 Restful User Experience (这个slide是个人认为解释的最好的)]]

根据笔者自己的经验和心得, 建议 能够使用REST就尽量使用REST, 主要基于下面几个考虑:

+ 扩展性
+ 松耦合(意味着,不用强制要求客户端去更新相应的代码)
+ 服务端实现语言无关
+ 性能
+ 安全性(例如HTTPS)

* RESTful到底是什么呢？

简单的讲，它是：
一种架构设计风格，提供了设计原则和约束条件，而不是架构。而满足这些约束条件和原则的应用程序或设计就是 RESTful架构或服务。

* RPC部分的补充

** RPC(远程过程调用)是什么

简单的说，RPC就是从一台机器（客户端）上通过参数传递的方式调用另一台机器（服务器）上的一个函数或方法（可以统称为服务）并得到返回的结果。

RPC 会隐藏底层的通讯细节（不需要直接处理Socket通讯或Http通讯）
RPC 是一个请求响应模型。客户端发起请求，服务器返回响应（类似于Http的工作方式）
RPC 在使用形式上像调用本地函数（或方法）一样去调用远程的函数（或方法）。

** 远程过程调用发展历程

ONC RPC （开放网络计算的远程过程调用），OSF RPC（开放软件基金会的远程过程调用）
CORBA（Common Object Request Broker Architecture公共对象请求代理体系结构）
DCOM（分布式组件对象模型），COM+
Java RMI
.NET Remoting
XML-RPC，SOAP，Web Service
PHPRPC，Hessian，JSON-RPC
Microsoft WCF，WebAPI
ZeroC Ice，Thrift，GRPC
Hprose

** 早期的 RPC

第一代 RPC（ONC RPC，OSF RPC）不支持对象的传递。
CORBA 太复杂，各种不同实现不兼容，一般程序员也玩不转。
DCOM，COM+ 逃不出 Windows 的手掌心。
RMI 只能在 Java 里面玩。
.NET Remoting 只能在 .NET 平台上玩。


** XML-RPC，SOAP，WebService

冗余数据太多，处理速度太慢。
RPC 风格的 Web Service 跨语言性不佳，而 Document 风格的 Web Service 又太过难用。
Web Service 没有解决用户的真正问题，只是把一个问题变成了另一个问题。
Web Service 的规范太过复杂，以至于在 .NET 和 Java 平台以外没有真正好用的实现，甚至没有可用的实现。
跨语言跨平台只是 Web Service 的一个口号，虽然很多人迷信这一点，但事实上它并没有真正实现。


** PHPRPC

基于 PHP 内置的序列化格式，在跨语言的类型映射上存在硬伤。
通讯上依赖于 HTTP 协议，没有其它底层通讯方式的选择。
内置的加密传输既是特点，也是缺点。
虽然比基于 XML 的 RPC 速度快，但还不是足够快。

** Hessian

二进制的数据格式完全不具有可读性。
官方只提供了两个半语言的实现（Java，ActionScript 和不怎么完美的 Python 实现），其它语言的第三方实现良莠不齐。
支持的语言不够多，对 Web 前端的 JavaScript 完全无视。
虽然是动态 RPC，但动态性仍然欠佳。
虽然比基于 XML 的 RPC 速度快，但还不是足够快。

** JSON-RPC

JSON 具有文本可读性，且比 XML 更简洁。
JSON 受 JavaScript 语言子集的限制，可表示的数据类型不够多。
JSON 格式无法表示数据内的自引用，互引用和循环引用。
某些语言具有多种版本的实现，但在类型影射上没有统一标准，存在兼容性问题。
JSON-RPC 虽然有规范，但是却没有统一的实现。在不同语言中的各自实现存在兼容性问题，无法真正互通。


** Microsoft WCF，WebAPI

它们是微软对已有技术的一个 .NET 平台上的统一封装，是对 .NET Remoting、WebService 和基于 JSON 、XML 等数据格式的 REST 风格的服务等技术的一个整合。
虽然号称可以在 .NET 平台以外来调用它的这些服务，但实际上跟在 .NET 平台内调用完全是两码事。它没有提供任何在其他平台的语言中可以使用的任何工具。

** ZeroC Ice，Thrift，GRPC

初代 RPC 技术的跨语言面向对象的回归。
仍然需要通过中间语言来编写类型和接口定义。
仍然需要用代码生成器来将中间语言编写的类型和接口定义翻译成你所使用的编程语言的客户端和服务器端的占位程序（stub）。
你必须要基于生成的服务器代码来单独编写服务，而不能将已有代码直接作为服务发布。
你必须要用生成的客户端代码来调用服务，而没有其它更灵活的方式。
如果你的中间代码做了修改，以上所有步骤你都要至少重复一遍。

** Hprose

http://www.hprose.com/case.html

无侵入式设计，不需要单独定义类型，不需要单独编写服务，已有代码可以直接发布为服务。
具有丰富的数据类型和完美的跨语言类型映射，支持自引用，互引用和循环引用数据。
支持众多传输方式，如 HTTP、TCP、Websocket 等。
客户端具有更灵活的调用方式，支持同步调用，异步调用，动态参数，可变参数，引用参数传递，多结果返回（Golang）等语言特征，Hprose 2.0 甚至支持推送。
具有良好的可扩展性，可以通过过滤器和中间件实现加密、压缩、缓存、代理等各种功能性扩展。
兼容的无差别跨语言调用
支持更多的常用语言和平台
支持浏览器端的跨域调用
没有中间语言，无需学习成本
性能卓越，使用简单

* 如何选择

+ 如果只是内部接口可以RPC，如果需要提供给外部访问需要restful
+ 绝大多数平台提供的都是restful的接口: Aws，facebook.

* 参考链接

+ [[https://segmentfault.com/q/1010000003064904][什么是 RESTful ？到底 REST 和 SOAP、RPC 有何区别？]]
