#+SETUPFILE: ../css/level-1.orgcss
#+TITLE: Dot学习

- [[http://zh.wikipedia.org/wiki/DOT%E8%AF%AD%E8%A8%80][ wiki]]
- [[http://www.graphviz.org/Documentation.php][Graphviz - Graph Visualization Software]]
- [[http://guiquanz.me/2014/03/15/graphviz-dot-in-all/][有趣的blog]]
- [[http://icodeit.org/2012/01/%E4%BD%BF%E7%94%A8graphviz%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE/][使用graphviz绘制流程图]]-没看完
- [[http://www.graphviz.org/content/color-names][color]]  [[http://www.graphviz.org/content/attrs#dfontsize][attr]]

* 无向图

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_1.png :cmdline -Kdot -Tpng :exports both
    graph {
            a -- b
            d -- e
    }
  #+END_SRC

  #+RESULTS:
   [[file:../img/dotx/dot_1.png]]

* 有向图

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_2.png :cmdline -Kdot -Tpng :exports both
    digraph {
            a -> b
            d -> e
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_2.png]]

* 属性

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_3.png :cmdline -Kdot -Tpng :exports both
    graph {
            //注释
            a [label="Foo"];
            b [shape=box];
            a -- b -- c [color=red];
            b -- d [style=dotted];
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_3.png]]

* 一个简单的例子

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_4.png :cmdline -Kdot -Tpng :exports both
    graph ethane {
            C_0 -- H_0 [type=s];
            C_0 -- H_1 [type=s];
            C_0 -- H_2 [type=s];
            C_0 -- C_1 [type=s];
            C_1 -- H_3 [type=s];
            C_1 -- H_4 [type=s];
            C_1 -- H_5 [type=s];
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_4.png]]

* 最简单的一张图

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_success.png :cmdline -Kdot -Tpng :exports both
    digraph {
            // graph from left to right
            rankdir=LR;
            //splines=true;
            node [shape=box];

            id [label="Install Graphviz 2fewffwef"]
            conf [label="Configure org-babel"]
            dot [label="DOT in org-mode"]

            id -> conf
            conf -> dot
            dot -> "Profit"
            dot -> "Success" [style=dotted]
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_success.png]]
* 来点颜色

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_color.png :cmdline -Kdot -Tpng :exports both
    digraph helloworld {
            node [shape="record"]
            edge [style="dashed"]

            h;
            e;
            l [style="filled", color="red", fillcolor="green"];
            l;
            o;
            w;
            o [style="filled", color="green", fillcolor="red"];
            r;
            l;
            d;

            h -> e -> l -> l -> o [color="blue"];
            o -> w -> o -> r -> l -> d;

            g -> e;

    }

  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_color.png]]
* 非确定性有限状态机

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_state_machine.png :cmdline -Kdot -Tpng :exports both
    digraph finite_state_machine {
            rankdir=LR;
            size="8,5"

            node [shape=doublecircle color="red"] S;
            node [shape=point] qs;
            node [shape=circle color="green"] q1;
            node [shape=circle color="red"] q2;

            qs -> S;
            S  -> q1 [label="a"];
            S  -> S  [label="a"];
            q1 -> S  [label="a"];
            q1 -> q2 [label="b"];
            q2 -> q1 [label="b"];
            q2 -> q2 [label="b" color="blue"];
    }


  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_state_machine.png]]
* 确定性有限状态机

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/dot_state_machine1.png :cmdline -Kdot -Tpng :exports both
    digraph definite_state_machine {
            rankdir=LR;
            size="8,5"

            node [shape=doublecircle label="{f}", fontsize=12] f;
            node [shape=doublecircle label="{q2, f}", fontsize=10] q2f;
            node [shape=circle label="S", fontsize=14] S;
            node [shape=circle, label="{q1}", color="red", fontsize=12] q1;
            node [shape=circle, label="{q2}", fontsize=12] q2;
            node [shape=point] qs;

            qs -> S;
            S  -> q1  [label="a"];
            S  -> q2  [label="b"];
            S  -> q2f [label="c"];

            q1  -> q2 [label="b"];
            q2f -> f  [label="b"];
            q2f -> q2 [label="c"];

            q2 -> f  [label="b"]
            q2 -> q2 [label="c" color="blue"];
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/dot_state_machine1.png]]
* graphviz简介

  graphviz中包含了众多的布局器：

   - dot 默认布局方式，主要用于有向图
   - neato 基于spring-model(又称force-based)算法
   - twopi 径向布局
   - circo 圆环布局
   - fdp 用于无向图

   graphviz的设计初衷是对有向图/无向图等进行自动布局，开发人员使用dot脚本定义图形元素，然后选择算法进行布局，最终导出结果。


   一般流程;

   - 定义一个图，并向图中添加需要的顶点和边
   - 为顶点和边添加样式
   - 使用布局引擎进行绘制
* 子图的绘制
  #+BEGIN_SRC graphviz-dot :file ../img/dotx/graphviz_1.png :cmdline -Kdot -Tpng :exports both
    digraph {
            node [shape="record"];
            edge [style="dashed"];

            a [style="filled", color="black", fillcolor="chartreuse"];
            b;

            subgraph cluster_cd {
                    label="c and d"
                    bgcolor="mintcream"
                    c;
                    d;
            }

            a -> b;
            b -> d;
            c -> d[color="red"]
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/graphviz_1.png]]
* 绘制hash表的数据结构
  可以通过-K参数改变布局方式

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/graphviz_2.png :cmdline -Kcirco -Tpng :exports both
    digraph st2{
            fontname="Verdana";
            fontsize=10;
            rankdir=TB;

            node [fontname="Verdana", fontsize=10, color="skyblue", shape="record"];
            edge [fontname="Verdana", fontsize=10, color="crimson", style="solid"];

            st_hash_type [label="{<head>st_hash_type|(*compare)|(*hash)}"];
            st_table_entry [label="{<head>st_table_entry|hash|key|record|<next>next}"];
            st_table [label="{st_table|<type>type|num_bins|num_entries|<bins>bins}"];

            st_table:bins -> st_table_entry:head;
            st_table:type -> st_hash_type:head;
            st_table_entry:next -> st_table_entry:head [style="dashed", color="forestgreen"];

    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/graphviz_2.png]]
* 好看的图

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/graphviz_3.png :cmdline -Kdot -Tpng :exports both
    digraph structs {
            node[shape=circle]
            struct1 [label="<f0> left|<f1> mid\ dle|<f2> right"];
            struct2 [label="{<f0> one|<f1> two\n\n\n}" shape=Mrecord];
            struct3 [label="hello\nworld |{ b |{c|<here> d|e}| f}| g | h"];
            struct1:f1 -> struct2:f0;
            struct1:f0 -> struct3:f1;
    }
  #+END_SRC

  #+RESULTS:
  [[file:../img/dotx/graphviz_3.png]]
* Test

  #+BEGIN_SRC graphviz-dot :file ../img/dotx/test_1.png :cmdline -Kdot -Tpng :exports both
    digraph frames {
            edge [style="dashed",arrowhead=empty]
            subgraph cluster_c  {
                    label="clients"
                    bgcolor="mintcream"
                    c1;
                    c2;
                    c3;
                    c4;
            }


            subgraph cluster_servers  {
                    label="servers"
                    bgcolor="cadetblue2"
                    subgraph cluster_a  {
                            label="agents"
                            bgcolor="darkseagreen1"
                            a1;
                            a2;
                            a3;
                            a4;
                    }

                    subgraph cluster_hub  {
                            fontsize=9
                            label="hubs:用来转发消息"
                            bgcolor="aquamarine"

                            h1 [style=box,color=red];
                            h2 [style=box,color=red];
                    }

                    subgraph cluster_room  {
                            label="Rooms"
                            bgcolor="chocolate1"
                            r1;
                            r2;
                            r3;
                            r4;
                    }
            }

            c1 -> a1;
            a1 -> c1;

            c1 -> a2 [style=dotted,color=burlywood];
            c1 -> a3 [style=dotted,color=burlywood];
            c1 -> a4 [style=dotted,color=burlywood];

            a2 -> c1 [style=dotted,color=burlywood];
            a3 -> c1 [style=dotted,color=burlywood];
            a4 -> c1 [style=dotted,color=burlywood];

            c2 -> a2;
            c3 -> a3;
            c4 -> a4;

            h1 -> a1;
            a1 -> h1;

            h1 -> r1;
            r1 -> h1;

    }
  #+END_SRC
  #+RESULTS:
  [[file:../img/dotx/test_1.png]]
* emacs快捷方式。

  1) 输入 compile 会直接编译当前正在编写的dot.
  2) 输入 graphviz-dot-preview可查看  C-c p

  但是你需要在/usr/local/bin下面自己写个doted. 我的是:

#+begin_src sh
#!/usr/bin/env bash
dot -Tpng $1 -o /tmp/outfile.png
open /tmp/outfile.png
#+end_src
