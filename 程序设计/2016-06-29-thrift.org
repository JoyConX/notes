* 介绍

目前流行的服务调用方式有很多种，例如基于 SOAP 消息格式的 Web Service，基于 JSON 消息格式的 RESTful 服务等。其中所用到的数据传输方式包括 XML，JSON 等，然而 XML 相对体积太大，传输效率低，JSON 体积较小，新颖，但还不够完善。本文将介绍由 Facebook 开发的远程服务调用框架 Apache Thrift，它采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势。本文将详细介绍 Thrift 的使用，并且提供丰富的实例代码加以解释说明，帮助使用者快速构建服务。

+ [[https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/][Apache Thrift - 可伸缩的跨语言服务开发框架]] 此文章入门合理.
+ [[http://studygolang.com/articles/3110][Thrift RPC 使用指南实战(附golang&PHP代码)]]
+ [[http://nordicapis.com/microservice-showdown-rest-vs-soap-vs-apache-thrift-and-why-it-matters/][Microservice Showdown – REST vs SOAP vs Apache Thrift (And Why It Matters)]]

* 安装in mac

#+begin_src sh
# 先要安装bison
wget http://ftp.gnu.org/gnu/bison/bison-2.5.1.tar.gz

# 下载thrift
wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/thrift/0.9.3/thrift-0.9.3.tar.gz

#+end_src


+ 最好不要安装在sudo下面
+ java需要安装ant,ivy 才能配合使用

列子文件

#+begin_src thrift
namespace java service.demo

service Hello{
string helloString(1:string para)
  i32 helloInt(1:i32 para)
  bool helloBoolean(1:bool para)
  void helloVoid()
  string helloNull()
}
#+end_src

生成

#+begin_src sh

thrift --gen <language> <Thrift filename>

hello thrift --gen rb hello2.thrift
hello thrift --gen py hello2.thrift
hello thrift --gen erl hello2.thrift

#+end_src

* thrift Erlang配合开发

+ [[http://www.cnblogs.com/getong/p/3509755.html][erlang+thrift配合开发例子]]  
+ [[http://xlambda.com/blog/2013/01/16/thrift-erlang-source-code-reading/][Thrift Erlang实现源代码阅读]]

第一步:编写相应的*.thrift  文件
第二步:thrift --gen erl *.thrift，将生成的gen-erl复制到src中
第三步:按照例子代码写一个模块，将*.thrift中的函数全都实现了，并在里面指定服务的端口号和启动thrift的框架
第四步:将上一步写的模块添加到整个程序启动过程的最末处，启动thrift开始对外提供服务。

#+begin_src erlang
  handle(Req, State) ->
      {Method, Req2} = cowboy_req:method(Req),
      {ok, Echo, Req3} = cowboy_req:body (Req2), %% Echo is a serialized 'hello' in smallTest by json format.
      {ok, Trans} = thrift_memory_buffer:new(Echo),
      {ok, Protocol} = thrift_json_protocol:new(Trans),
      {_Protocol1, {ok, Struct}} = thrift_protocol:read(Protocol,   
      smallTest_types:struct_info('hello')), %% Error here
      {ok, Req4} = echo(Method, Echo, Req3),
      {ok, Req4, State}.
#+end_src

 一个服务器将上面涉及的所有特性汇集到一起：
 创建一个transport
 为这个transport创建一个输入/输出协议
 基于输入/输出协议创建一个处理器（processor）
 等待进来的连接并且将它们交给处理器
