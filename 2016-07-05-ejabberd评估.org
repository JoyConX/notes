ejabberd是使用erlang开发的开源聊天服务器，基于XMPP协议。

* 优点

** 主要优点

+ 跨平台的: ejabberd可以运行在Microsoft Windows和Unix派生系统，例如Linux, FreeBSD和NetBSD.
+ 分布式的: 你可以在一个集群的机器上运行ejabberd，并且所有的机器都服务于同一个或一些Jabbe域. 当你需要更大容量的时候，你可以简单地增加一个廉价节点到你的集群里. 因此, 你不需要买一个昂贵的高端机器来支持上万个并发用户.
+ 容错: 你可以布署一个ejabberd集群，这样一个正常运行的服务的所有必需信息将被复制到所有节点. 这意味着如果其中一个节点崩溃了, 其他节点将无中断的继续运行. 另外, 也可以‘不停机’增加或更换节点.
+ 易于管理: ejabberd建立于开源的Erlang. 所以你不需要安装外部服数据库, 外部web服务器, 除此以外因为每个东西都已经包含在里面, 并且处于开箱可用状态. 

**  其他管理上的好处包括

+ 详尽的文档.
+ 便捷的安装程序，包括在Linux, Mac OS X, 以及Windows系统下.
+ Web管理.
+ 共享名册组.
+ 命令行管理工具.
+ 可外部集成的验证机制.
+ 发送匿名消息的能力.
+ 国际化: ejabberd领导国际化. 非常适合全球化. 相关功能包括:
+ 翻译成25种语言.
+ 支持IDNA.
+ 开放标准: ejabberd是的一个完全支持XMPP标准的开源Jabber服务器.
+ 完全兼容XMPP.
+ 基于XML的协议.
+ 支持的协议很多.

* 缺点

+ XMPP比之前我们之前自己实现的聊天复杂太多，当然各方面的功能和代码质量也好太多。
+ XMPP协议比较重，业内有很多刚开始用ejabberd的都换成了自己的协议实现：陌陌,what's apps
+ 客户端和服务器都需要有人对XMPP领域深入研究才能hold住。

* 推荐阅读

[[https://blog.process-one.net/ejabberd-massive-scalability-1node-2-million-concurrent-users/][ejabberd Massive Scalability: 1 Node — 2+ Million Concurrent Users]] 

ejabberd的一些性能相关

[[微信、陌陌等著名IM软件设计架构详解][https://www.itlipeng.cn/?p=701]] 微信、陌陌等著名IM软件设计架构详解


陌陌设计： 

陌陌发展刚开始由于规模小，30-40W的连接数（包括Android后台长连接用户），也使用XMPP；由于XMPP的缺点：流量大（基于XML），不可靠（为传统固定网络设计，没有考虑WIFI/2G/3G/地铁/电梯等复杂网络场景），交互复杂（登陆需5-6次，尤其是TLS握手）；XMPP丢消息的根本原因：服务端和客户端处于“半关闭”状态，客户端假连接状态，服务端有收不到回执；Server端连接层和逻辑层代码没有解耦分离，常常重启导致不可用；

[[https://ruby-china.org/topics/22530][移动 IM 学习笔记]]

如果说自己搭建一套IM框架的:

- 基本能用需要3个月
- 做的比较好需要9月到1年时间
- 做的像微信一样，那么需要2年时间

* [[https://www.v2ex.com/t/131245][XMPP 协议适合用来做移动 IM 么]] 

云吧对xmpp的评论

yunbaIO   2014-09-04 11:24:47 +08:00
不适合。虽然说XMPP本身是一个非常完整的协议，而且扩展性相当好，也有一些很好的Broker。但它并不适合用来做移动IM。其中一个劣势@jwfing 已经提到，就是它本身协议承载数据比例太低，差不多70%的流量都是消耗在标签上。另一个麻烦的问题就是它的延迟大。我们试验过用XMPP来做一个简单的Connect和用户认正,不仅要用1K的流量，还需要5-7次的交互，换句话说，一个登录就是秒级的延迟（移动互联网一个环回大概就是400、500毫秒）。另一个缺点就是XMPP的编解码也是很重，因为它是纯文本的解析器，你要用纯文本去做，不管是编码还是解码都是比较重的，在移动环境下合适。 


推荐用MQTT协议，它是二进制协议，而且本身非常精简，做移动网络环境下做IM非常合适，省电省流量。它的做法是一个订阅／发布系统，拿到权限的人就可以往频道里发消息，任何在这个频道里的人就可以收到。MQTT还是开放协议，有很多开源实现，可以用它的开源实现搭个环境来玩一玩。另外很重要的一点就是它的扩展很方便，它原来就留了两个两个命令字，再加上它协议头本身很轻，在它的扩展命令字上做一些简单的事情就可以扩展出很多命令字。 


我们云巴yunba.io是基于MQTT协议做双向消息实时推送，也支持Socket.io。开发者可以使用云巴，快速搭建包括移动IM以内的各类型实时应用。可以稳定支持千万级亿级海量用户。我们设立多处主干机房，全国范围内消息延迟在0.2s以内。 

我们也投入了大量时间精力研究实践实时海量数据通讯、统计、存储等问题。之前创始人还在ArchSummit上就这方面做了的分享，题目就是实时系统架构和实践，有兴趣的可以戳http://t.cn/RhUxmwN看视频，全程干货，当时也提到了协议选择的问题。 

* [[https://ruby-china.org/topics/22530][百万级分布式开源物联网MQTT消息服务器]] 

基于高并发的Erlang语言和OTP平台设计，支持百万级连接和分布式集群，发布订阅模式的开源MQTT消息服务器
完整支持MQTT V3.1/V3.1.1协议规范，扩展支持WebSocket、Stomp、CoAP、MQTT-SN或私有TCP协议

emqttd - 开源MQTT消息服务器¶

http://emqtt.com/docs/cluster.html
* getting started

http://127.0.0.1:5280/oauth/authorization_token?response_type=token&client_id=Client1&redirect_uri=http://127.0.0.1:80&scope=get_roster
http://client.uri/?access_token=RHIT8DoudzOctdzBhYL9bYvXz28xQ4Oj&token_type=bearer&expires_in=3600&scope=user_get_roster+sasl_auth&state=
http://localhost:5280/oauth/authorization_token?response_type=token&client_id=myclient&redirect_uri=http://localhost:5280&scope=user_get_roster+sasl_auth&state

http://stackoverflow.com/questions/34757845/how-to-configure-ejabberd-with-oauth-support

http://localhost:5280/?access_token=vYC6Q2o4v0wTuSlbS5YadmAyedD33xJX&token_type=bearer&expires_in=3600&scope=sasl_auth&state=

curl -v -X POST -H "Authorization: Bearer vYC6Q2o4v0wTuSlbS5YadmAyedD33xJX" http://localhost:5280/api/get_roster -d '[]'


** 炮筒:get_roster

q-> working

http://localhost:5280/oauth/authorization_token?response_type=token&client_id=Client1&redirect_uri=http://localhost&scope=get_roster+sasl_auth
http://localhost/?access_token=sQiKlgvrPYuf9bHjcMitDc4aqyljsfft&token_type=bearer&expires_in=3600&scope=get_roster%20sasl_auth&state=
curl -v -X POST -H "Authorization: Bearer sQiKlgvrPYuf9bHjcMitDc4aqyljsfft" http://localhost:5280/api/get_roster -d '{}'

** connected_users


http://localhost:5280/oauth/authorization_token?response_type=token&client_id=Client1&redirect_uri=http://localhost&scope=connected_users+sasl_auth+get_roster+register
http://localhost/?access_token=QFLVLjNPWWLwaJtZ2462jz3JQM6d7Q1Z&token_type=bearer&expires_in=3600&scope=connected_users%20sasl_auth%20get_roster%20register&state=


# 普通身份执行
curl -v -X POST -H "Authorization: Bearer JaTWkvLqzZZXY8i8L1ih7UvaTgqxH6AS" http://localhost:5280/api/get_roster -d '{}'

# 使用admin身份执行
curl -v -X POST -H "X-Admin: true" -H "Authorization: Bearer JaTWkvLqzZZXY8i8L1ih7UvaTgqxH6AS" http://localhost:5280/api/change_password -d '{"user": "ejabberd2", "host": "localhost"}'
curl -v -X POST -H "X-Admin: true" -H "Authorization: Bearer JaTWkvLqzZZXY8i8L1ih7UvaTgqxH6AS" http://localhost:5280/api/get_roster -d '{"user": "ejabberd2", "server": "localhost"}'
curl -v -X POST -H "X-Admin: true" -H "Authorization: Bearer JaTWkvLqzZZXY8i8L1ih7UvaTgqxH6AS" http://localhost:5280/api/connected_users -d '{}'

curl -v -X POST -H "X-Admin: true" -H "Authorization: Bearer QFLVLjNPWWLwaJtZ2462jz3JQM6d7Q1Z" http://localhost:5280/api/register -d '{ "user": "ejabberd3", "host": "localhost",    "password": "wwww" }'

 POST /api/register
  {
    "user": "aaaaa",
    "host": "bbbbb",
    "password": "ccccc"
  }

* 《英雄联盟》支撑最高750万同时在线用户的聊天服务打造

[[http://www.csdn.net/article/2014-10-27/2822292-how-league-of-legends-scaled-chat-to-70-million-players][连接]]
[[http://www.slideshare.net/michalptaszek/strange-loop-presentation][ppt]]


如上图所示，该游戏的聊天服务需要支撑750万并发用户，2700万日活跃用户，每秒钟需要处理的消息上万条，每台服务器每天处理消息达十亿条。

** 状态

月6700万的独立访问玩家，不包括其他使用这个系统的服务
日活跃玩家2700万
750万的并发玩家
每台服务器每天路由10亿个事件，值得一提的是，CPU和内存使用率只有20-30%
每秒处理1.1万条消息
世界范围内部署的chat服务器达数百台，负责运维人员只有3个
99%的可用率

** 平台

Ejabberd (Erlang based) XMPP server
Riak
Load Balancer
Graphite
Zabbix
Nagios
Jenkins
Confluence


* 将db换成mysql
https://docs.ejabberd.im/admin/guide/databases/mysql/


#+begin_src yaml

  ##
  ## To handle XML-RPC requests that provide admin credentials:
  ##
  # - 
  #   port: 4560
  #   module: ejabberd_xmlrpc
  #   access_commands: {}
  - 
    port: 5280
    module: ejabberd_http
    request_handlers:
      "/websocket": ejabberd_http_ws
      "/api": mod_http_api
      "/oauth": ejabberd_oauth
    ##  "/pub/archive": mod_http_fileserver
    web_admin: true
    http_bind: true
    register: true
    captcha: true


commands_admin_access: configure
commands:
  - add_commands: open
  - add_commands: user
  - add_commands: admin
  - add_commands: restricted
oauth_expire: 3600
oauth_access: all

#+end_src


* API操作

开放API

#+begin_src yaml
  mod_http_api:
    admin_ip_access: all   
#+end_src

** 注册新用户

#+begin_src sh
curl -v -X POST -H "X-Admin: true"  http://localhost:5280/api/register -d '{"user": "ejabberd5", "host": "localhost", "password": "wwww" }'
#+end_src

** 获取某用户的花名册
#+begin_src sh
curl -v -X POST -H "X-Admin: true"  http://localhost:5280/api/get_roster -d '{"user": "ejabberd2", "server": "localhost"}'
#+end_src
